name: RDP

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username for RDP (default: Waffles)'
        default: 'Waffles'
      password:
        description: 'Password for RDP (leave blank to use stored password)'
        default: ''
      run_indefinitely:
        description: 'Run indefinitely with auto-restart? (true/false)'
        type: boolean
        default: false

jobs:
  secure-rdp:
    runs-on: windows-latest  # Usa Windows Server 2025 (similar a Win10/11)

    steps:
      - name: Set Up Persistent Credentials
        run: |
          $username = "${{ github.event.inputs.username || 'Waffles' }}"
          $password = "${{ github.event.inputs.password || secrets.RDP_PASSWORD }}"
          
          if (-not $password) {
              Add-Type -AssemblyName System.Security
              $charSet = @{
                  Upper   = [char[]](65..90)
                  Lower   = [char[]](97..122)
                  Number  = [char[]](48..57)
                  Special = ([char[]](33..47) + [char[]](58..64) +
                             [char[]](91..96) + [char[]](123..126))
              }
              $rawPassword = @()
              $rawPassword += $charSet.Upper | Get-Random -Count 4
              $rawPassword += $charSet.Lower | Get-Random -Count 4
              $rawPassword += $charSet.Number | Get-Random -Count 4
              $rawPassword += $charSet.Special | Get-Random -Count 4
              $password = -join ($rawPassword | Sort-Object { Get-Random })
          }
          
          echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "::add-mask::$password"
          
          $token = "${{ secrets.GH_TOKEN }}"
          if ($token) {
              $headers = @{ Authorization = "Bearer $token"; Accept = 'application/vnd.github.v3+json' }
              $repo = "${{ github.repository }}"
              
              $publicKey = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/actions/secrets/public-key" -Headers $headers
              $keyId = $publicKey.key_id
              $key = $publicKey.key
              $encrypted = ConvertTo-SecureString -String $username -AsPlainText -Force | ConvertFrom-SecureString -Key (ConvertFrom-Base64 $key)
              $body = @{ encrypted_value = "$encrypted"; key_id = "$keyId" } | ConvertTo-Json
              Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/actions/secrets/RDP_USERNAME" -Method Put -Headers $headers -Body $body
              
              $encrypted = ConvertTo-SecureString -String $password -AsPlainText -Force | ConvertFrom-SecureString -Key (ConvertFrom-Base64 $key)
              $body = @{ encrypted_value = "$encrypted"; key_id = "$keyId" } | ConvertTo-Json
              Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/actions/secrets/RDP_PASSWORD" -Method Put -Headers $headers -Body $body
          }

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 remoteip=100.64.0.0/10
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $securePass = ConvertTo-SecureString "${{ env.RDP_PASSWORD }}" -AsPlainText -Force
          New-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "${{ env.RDP_USERNAME }}"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "${{ env.RDP_USERNAME }}"
          
          if (-not (Get-LocalUser -Name "${{ env.RDP_USERNAME }}")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-rdp-${{ github.repository_id }}
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Install Roblox Studio
        run: |
          $robloxUrl = "https://setup.roblox.com/RobloxStudioLauncherBeta.exe"
          $installerPath = "$env:TEMP\RobloxStudio.exe"
          Invoke-WebRequest -Uri $robloxUrl -OutFile $installerPath
          Start-Process $installerPath -ArgumentList "--install" -Wait
          Remove-Item $installerPath -Force
          Write-Host "Roblox Studio instalado exitosamente."

      - name: Install SuperBulletAI
        run: |
          $sbaUrl = "https://ai.superbulletstudios.com/download"
          $installerPath = "$env:TEMP\SuperBulletAI.exe"
          Invoke-WebRequest -Uri $sbaUrl -OutFile $installerPath
          Start-Process $installerPath -ArgumentList "/S" -Wait
          Remove-Item $installerPath -Force
          Write-Host "SuperBulletAI instalado exitosamente. Registro requerido para tokens."
          Start-Sleep -Seconds 120

      - name: Install Classic Shell (Open-Shell)
        run: |
          $csUrl = "https://github.com/Open-Shell/Open-Shell-Menu/releases/download/v4.4.220/OpenShellSetup_4_4_220.exe"
          $installerPath = "$env:TEMP\OpenShell.exe"
          Invoke-WebRequest -Uri $csUrl -OutFile $installerPath
          Start-Process $installerPath -ArgumentList "/S" -Wait
          Remove-Item $installerPath -Force
          Write-Host "Classic Shell (Open-Shell) instalado exitosamente. Reinicia la sesión RDP si no aplica automáticamente."

      - name: Auto-Restart Setup (if enabled)
        if: ${{ github.event.inputs.run_indefinitely == 'true' }}
        run: |
          Start-Sleep -Seconds 19800
          $token = "${{ secrets.GH_TOKEN }}"
          $repo = "${{ github.repository }}"
          $workflowId = "${{ github.workflow }}"
          $headers = @{ Authorization = "Bearer $token"; Accept = 'application/vnd.github.v3+json' }
          $body = @{ ref = 'main'; inputs = @{ username = "${{ env.RDP_USERNAME }}"; password = "${{ env.RDP_PASSWORD }}"; run_indefinitely = "true" } } | ConvertTo-Json
          Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/actions/workflows/$workflowId/dispatches" `
                            -Method Post -Headers $headers -Body $body
          Write-Host "Auto-restart triggered. This session will end soon."
          exit

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: ${{ env.RDP_USERNAME }}"
          Write-Host "Password: [Masked - Check GitHub Secrets or initial workflow input]"
          Write-Host "Apps instaladas: Roblox Studio, SuperBulletAI (regístrate para tokens), y Classic Shell (Open-Shell) para menú clásico"
          Write-Host "To restart: Trigger the workflow again in GitHub Actions UI"
          Write-Host "To terminate: Cancel the workflow in GitHub Actions UI"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Manage via GitHub Actions UI"
              Start-Sleep -Seconds 300
          }
